Disassembly Listing for pic12f675_eval
Generated From:
C:/Users/Peter/Documents/pic12f675_eval.X/dist/default/production/pic12f675_eval.X.production.cof
25.6.2019 0:09:17

---  C:/Users/Peter/Documents/pic12f675_eval.X/main.c  --------------------------------------------------
1:             /* 
2:              * File:   main.c
3:              * Author: Peter
4:              *
5:              * Created on 24. april 2019, 0:12
6:              */
7:             
8:             #include <stdio.h>
9:             #include <stdlib.h>
10:            #include <stdint.h>
11:            //#include <pic12f675.h>
12:            
13:            #include <htc.h>
14:            
15:            #include "GPIO_driver.h"
16:            #include "ADC_driver.h"
17:            
18:            #include "hw_timer0.h"
19:            #include "interrupt.h"
20:            
21:            #define TIMER0_1S_CONST         (242u)
22:            #define TIMER0_0_5S_CONST       (121u)
23:            
24:            
25:            __CONFIG(FOSC_INTRCIO & WDTE_OFF & PWRTE_OFF & MCLRE_ON & BOREN_ON & CP_OFF & CPD_OFF);
26:            
27:            
28:            void delay_blk(uint16_t delay_cnt);
29:            
30:            
31:            void tmr0_uart_intHandler(void) {
32:                gpio_write(GPIO_PIN_2_Msk, GPIO_TOGGLE); 
33:                //gpio_write(GPIO_PIN_4_Msk, GPIO_TOGGLE); 
34:            }
35:            
36:            void tmr0_sw_intHandler(void)
37:            {
38:                static uint8_t timer0_cnt = 0;
39:                timer0_cnt--;
007F  3001     MOVLW 0x1
0080  1283     BCF STATUS, 0x5
0081  02B2     SUBWF timer0_cnt, F
40:                if(timer0_cnt == 0) {
0082  08B2     MOVF timer0_cnt, F
0083  1D03     BTFSS STATUS, 0x2
0084  2886     GOTO 0x86
0085  2887     GOTO 0x87
0086  2892     GOTO 0x92
41:                    timer0_cnt = TIMER0_1S_CONST;
0087  30F2     MOVLW 0xF2
0088  00A3     MOVWF 0x23
0089  0823     MOVF 0x23, W
008A  00B2     MOVWF timer0_cnt
42:                    //timer0_cnt = TIMER0_0_5S_CONST;
43:                    gpio_write(GPIO_PIN_4_Msk, GPIO_TOGGLE);
008B  3002     MOVLW 0x2
008C  00A3     MOVWF 0x23
008D  0823     MOVF 0x23, W
008E  00A0     MOVWF GPIO_write
008F  3010     MOVLW 0x10
0090  203C     CALL 0x3C
0091  2892     GOTO 0x92
44:                    //gpio_write(GPIO_PIN_2_Msk, GPIO_TOGGLE);  
45:                }
46:            }
0092  0008     RETURN
47:            
48:            
49:            void delay_blk(uint16_t delay_cnt)
50:            {
51:                while(delay_cnt){
52:                    delay_cnt--;
53:                }
54:            }
55:            
56:            /*
57:             * 
58:             */
59:            int main(int argc, char** argv) {
60:                
61:                static uint8_t gpio_state = (1<<4);
00CD  3410     RETLW 0x10
62:                
63:                ADC_set_AN_intput2digital();
0093  20CA     CALL 0xCA
64:                gpio_init(GPIO_PIN_4_Msk, GPIO_OUTPUT);
0094  1283     BCF STATUS, 0x5
0095  01A9     CLRF mode
0096  1403     BSF STATUS, 0x0
0097  0DA9     RLF mode, F
0098  3010     MOVLW 0x10
0099  2063     CALL 0x63
65:                //gpio_init(GPIO_PIN_5_Msk, GPIO_OUTPUT);
66:                gpio_init(GPIO_PIN_2_Msk, GPIO_OUTPUT);
009A  1283     BCF STATUS, 0x5
009B  01A9     CLRF mode
009C  1403     BSF STATUS, 0x0
009D  0DA9     RLF mode, F
009E  3004     MOVLW 0x4
009F  2063     CALL 0x63
67:            
68:                intr_tmr0_en();
00A0  20B8     CALL 0xB8
69:                hw_timer0_setup(TIMER0_PRSC_8);
00A1  3002     MOVLW 0x2
00A2  20A6     CALL 0xA6
00A3  28A4     GOTO 0xA4
70:                
71:                while(1)
00A4  28A4     GOTO 0xA4
72:                { 
73:                   //gpio_write(GPIO_PIN_4_Msk, GPIO_TOGGLE);
74:                   //delay_blk(20000);
75:                   
76:                    //GPIObits.GP4 = 0;
77:                    //delay_blk(20000);
78:                    //GPIObits.GP4 = 1;
79:                    //delay_blk(10000); 
80:                    //GPIObits.GP4 = !GPIObits.GP4; 
81:                    
82:                    // if(hw_timer0_get_OF_bit()) {
83:                    //     timer0_cnt--;
84:                    //     if(timer0_cnt == 0) {
85:                    //         timer0_cnt = TIMER0_1S_CONST;
86:                    //         gpio_write(GPIO_PIN_4_Msk, GPIO_TOGGLE); 
87:                    //     }
88:                    // }
89:                    
90:                }
91:                return (EXIT_SUCCESS);
92:            }
00A5  280F     GOTO 0xF
93:            
---  C:/Users/Peter/Documents/pic12f675_eval.X/interrupt.c  ---------------------------------------------
1:             #include "interrupt.h"
2:             
3:             #include <stdint.h>
4:             #include <pic12f675.h>
5:             
6:             /* debug */
7:             #include "GPIO_driver.h"
8:             
9:             /* 1010 0000  [GIE|TMR0IE] */
10:            #define INTCON_TMR0_SETUP_Msk      (0xA0)
11:            
12:            // PIR PIE1
13:            
14:            void intr_tmr0_en(void)
15:            {
16:                INTCON = 0x00;
00B8  018B     CLRF INTCON
17:                // first clear bits that we will change
18:                INTCON &= (~INTCON_TMR0_SETUP_Msk);
00B9  305F     MOVLW 0x5F
00BA  1283     BCF STATUS, 0x5
00BB  00A9     MOVWF mode
00BC  0829     MOVF mode, W
00BD  058B     ANDWF INTCON, F
19:                INTCON |= (INTCON_TMR0_SETUP_Msk);
00BE  30A0     MOVLW 0xA0
00BF  00A9     MOVWF mode
00C0  0829     MOVF mode, W
00C1  048B     IORWF INTCON, F
20:            }
00C2  0008     RETURN
21:            
22:            void intr_adc_en(void) {
23:                INTCONbits.PEIE = 1;
24:                PIE1bits.ADIE = 1;
25:            }
26:            
27:            
28:            void interrupt pic_isr(void)
29:            {
0004  00DE     MOVWF 0x5E
0005  0E03     SWAPF STATUS, W
0006  1283     BCF STATUS, 0x5
0007  00A5     MOVWF 0x25
0008  0804     MOVF FSR, W
0009  00A6     MOVWF 0x26
000A  080A     MOVF PCLATH, W
000B  00A7     MOVWF 0x27
000C  085F     MOVF 0x5F, W
000D  00A8     MOVWF 0x28
000E  2814     GOTO 0x14
000F  1683     BSF STATUS, 0x5
0010  23FF     CALL 0x3FF
0011  0090     MOVWF T1CON
0012  0183     CLRF STATUS
0013  28C3     GOTO 0xC3
30:                // only process timer-triggered interrupts
31:                if(INTCONbits.TMR0IE && INTCONbits.TMR0IF) {
0014  1E8B     BTFSS INTCON, 0x5
0015  2817     GOTO 0x17
0016  2818     GOTO 0x18
0017  2829     GOTO 0x29
0018  1D0B     BTFSS INTCON, 0x2
0019  281B     GOTO 0x1B
001A  281C     GOTO 0x1C
001B  2829     GOTO 0x29
32:                    //portValue++;
33:                    tmr0_sw_intHandler();
001C  207F     CALL 0x7F
34:                    //tmr0_uart_intHandler();
35:                    // #debug
36:                    gpio_write(GPIO_PIN_2_Msk, GPIO_TOGGLE); 
001D  3002     MOVLW 0x2
001E  1283     BCF STATUS, 0x5
001F  00A4     MOVWF 0x24
0020  0824     MOVF 0x24, W
0021  00A0     MOVWF GPIO_write
0022  3004     MOVLW 0x4
0023  203C     CALL 0x3C
37:            
38:                    TMR0 = 155;
0024  309B     MOVLW 0x9B
0025  1283     BCF STATUS, 0x5
0026  0081     MOVWF TMR0
39:                    INTCONbits.TMR0IF = 0;  // clear this interrupt condition
0027  110B     BCF INTCON, 0x2
0028  2829     GOTO 0x29
40:                }
41:            
42:                if(PIR1bits.ADIF == 1) {
0029  1F0C     BTFSS PIR1, 0x6
002A  282C     GOTO 0x2C
002B  282D     GOTO 0x2D
002C  2831     GOTO 0x31
43:                    adc_sw_intHandler();
002D  20CE     CALL 0xCE
44:                    PIR1bits.ADIF = 0; 
002E  1283     BCF STATUS, 0x5
002F  130C     BCF PIR1, 0x6
0030  2831     GOTO 0x31
45:                }
46:            }
0031  0828     MOVF 0x28, W
---  C:/Users/Peter/Documents/pic12f675_eval.X/hw_timer0.c  ---------------------------------------------
1:             #include "hw_timer0.h"
2:             
3:             
4:             #define OPTION_REG_PRSC_Msk         (0x07u)
5:             
6:             void hw_timer0_setup(eTimer0_prsc_t prsc)
7:             {
00A6  1283     BCF STATUS, 0x5
00A7  00AA     MOVWF 0x2A
8:                 TMR0 = 0x00;
00A8  0181     CLRF TMR0
9:                 OPTION_REG = 0;
00A9  1683     BSF STATUS, 0x5
00AA  0181     CLRF TMR0
10:                //OPTION_REGbits.T0CS = 1;
11:                /* clear prescaler bits */
12:                OPTION_REG &= (~OPTION_REG_PRSC_Msk);
00AB  30F8     MOVLW 0xF8
00AC  1283     BCF STATUS, 0x5
00AD  00A9     MOVWF mode
00AE  0829     MOVF mode, W
00AF  1683     BSF STATUS, 0x5
00B0  0581     ANDWF TMR0, F
13:                /* set prescaler bits*/
14:                OPTION_REG |= (prsc);
00B1  1283     BCF STATUS, 0x5
00B2  082A     MOVF 0x2A, W
00B3  00A9     MOVWF mode
00B4  0829     MOVF mode, W
00B5  1683     BSF STATUS, 0x5
00B6  0481     IORWF TMR0, F
15:                //OPTION_REGbits.T0CS = 0;
16:            
17:                //OPTION_REG = 0x03; // this set prescaler to 16
18:            
19:            }
00B7  0008     RETURN
20:            
21:            uint8_t hw_timer0_get_OF_bit(void)
22:            {
23:                if(INTCONbits.T0IF){
24:                    INTCONbits.T0IF = 0;
25:                    return 1;
26:                }else {
27:                    return 0;
28:                }
29:            }
---  C:/Users/Peter/Documents/pic12f675_eval.X/GPIO_driver.c  -------------------------------------------
1:             
2:             #include "htc.h"
3:             #include "GPIO_driver.h"
4:             
5:             
6:             void gpio_init(GPIO_pin_msk_t pin_msk, eGPIO_mode_t mode){
7:                 /* note: input PULL_UP mode not yet implemented */ 
8:                 static uint8_t TRISIO_state = 0x00;
9:             
10:                if(mode == GPIO_OUTPUT) {
0063  1283     BCF STATUS, 0x5
0064  00AB     MOVWF 0x2B
0065  0829     MOVF mode, W
0066  3A01     XORLW 0x1
0067  1D03     BTFSS STATUS, 0x2
0068  286A     GOTO 0x6A
0069  286B     GOTO 0x6B
006A  2870     GOTO 0x70
11:                    TRISIO_state &= (~pin_msk);
006B  092B     COMF 0x2B, W
006C  00AA     MOVWF 0x2A
006D  082A     MOVF 0x2A, W
006E  05B0     ANDWF TRISIO_state, F
12:                } else if (mode == GPIO_INPUT) {
006F  287B     GOTO 0x7B
0070  08A9     MOVF mode, F
0071  1D03     BTFSS STATUS, 0x2
0072  2874     GOTO 0x74
0073  2875     GOTO 0x75
0074  287B     GOTO 0x7B
13:                    TRISIO_state |= (pin_msk);
0075  082B     MOVF 0x2B, W
0076  00AA     MOVWF 0x2A
0077  082A     MOVF 0x2A, W
0078  04B0     IORWF TRISIO_state, F
0079  287B     GOTO 0x7B
14:                }
007A  287B     GOTO 0x7B
15:                TRISIO = TRISIO_state;
007B  0830     MOVF TRISIO_state, W
007C  1683     BSF STATUS, 0x5
007D  0085     MOVWF GPIO
16:            
17:            
18:                // if(mode == GPIO_OUTPUT) {
19:                //     TRISIO &= (~pin_msk);
20:                // } else if (mode == GPIO_INPUT) {
21:                //     TRISIO |= (pin_msk);
22:                // }
23:                //GPIO &= (~pin_msk);
24:            }
007E  0008     RETURN
25:            
26:            void gpio_write(GPIO_pin_msk_t pin_msk, eGPIO_write_t GPIO_write)
27:            {
28:                static uint8_t GPIO_state = 0x00;
29:                
30:                if(GPIO_write == GPIO_HIGH){
003C  1283     BCF STATUS, 0x5
003D  00A2     MOVWF 0x22
003E  0820     MOVF GPIO_write, W
003F  3A01     XORLW 0x1
0040  1D03     BTFSS STATUS, 0x2
0041  2843     GOTO 0x43
0042  2844     GOTO 0x44
0043  2849     GOTO 0x49
31:                    GPIO_state |= (pin_msk);
0044  0822     MOVF 0x22, W
0045  00A1     MOVWF 0x21
0046  0821     MOVF 0x21, W
0047  04B1     IORWF GPIO_state, F
32:                    //GPIO |= (pin_msk); // this for some to me unknown reason not work 
33:                }else if(GPIO_write == GPIO_LOW){
0048  2860     GOTO 0x60
0049  08A0     MOVF GPIO_write, F
004A  1D03     BTFSS STATUS, 0x2
004B  284D     GOTO 0x4D
004C  284E     GOTO 0x4E
004D  2853     GOTO 0x53
34:                    GPIO_state &= (~pin_msk);
004E  0922     COMF 0x22, W
004F  00A1     MOVWF 0x21
0050  0821     MOVF 0x21, W
0051  05B1     ANDWF GPIO_state, F
35:                    //GPIO &= (~pin_msk);
36:                }else if(GPIO_write == GPIO_TOGGLE){
0052  2860     GOTO 0x60
0053  0820     MOVF GPIO_write, W
0054  3A02     XORLW 0x2
0055  1D03     BTFSS STATUS, 0x2
0056  2858     GOTO 0x58
0057  2859     GOTO 0x59
0058  2860     GOTO 0x60
37:                    GPIO_state ^= (pin_msk);
0059  0822     MOVF 0x22, W
005A  00A1     MOVWF 0x21
005B  0821     MOVF 0x21, W
005C  06B1     XORWF GPIO_state, F
005D  2860     GOTO 0x60
38:                    //GPIO ^= (pin_msk);
39:                }
005E  2860     GOTO 0x60
40:                GPIO = GPIO_state;
005F  2860     GOTO 0x60
0060  0831     MOVF GPIO_state, W
0061  0085     MOVWF GPIO
41:            }
0062  0008     RETURN
---  C:/Users/Peter/Documents/pic12f675_eval.X/ADC_driver.c  --------------------------------------------
1:             #include <pic12f675.h>
2:             
3:             #include "ADC_driver.h"
4:             
5:             
6:             #define ADC_ANSEL_ADCS_Pos              (4u)
7:             #define ADC_ANSEL_ADCS_F64_Msk          (0x06u)
8:             
9:             #define ADC_ANSEL_ANS_CH2_Pos           (2u)
10:            #define ADC_ANSEL_ANS_CH2_Msk           (0x01u)
11:            
12:            
13:            #define ADC_ADCON0_ADON_Msk           (0x01u)
14:            #define ADC_ADCON0_ADGO_Msk           (0x04u)
15:            
16:            
17:            void ADC_drv_init(void) {
18:                gpio_init(GPIO_PIN_2_Msk, GPIO_INPUT);
19:                
20:                ADCON0 = 0x00;
21:                /* select AN2 channel */
22:                ADCON0bits.CHS1 = 1;
23:                ADCON0bits.CHS0 = 0;
24:            }
25:            
26:            void ADC_drv_read(void) {
27:            
28:            }
29:            
30:            void ADC_set_AN_intput2digital(void){
31:                ANSEL = 0x00;
00CA  1683     BSF STATUS, 0x5
00CB  019F     CLRF ADCON0
32:            }
00CC  0008     RETURN
33:            
34:            
35:            void adc_sw_intHandler(void){
36:                
37:            }
00CE  0008     RETURN
